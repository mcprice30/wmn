// Package sensor contains implementations of the various sensors that send
// data to the Sensor Hub.
//
// Currently, this consists of:
//
// GasSensor:		Monitors the levels of toxic gas. Data is sent as data.GasData
// packets, at an interval of 250ms.
//
// HeartRateSensor: Monitors the wearer's heart rate. Data is sent as
// data.HeartRateData packets, at an interval of 1000ms.
//
// LocationSensor: Monitors the current location of the wearer. Data is sent
// as data.LocationData packets, at an interval of 500ms.
//
// OxygenSensor: Monitors the oxygen level of the wearer's air-pack. Data is
// sent as data.OxygenData packets, at an interval of 2000ms.
package sensor

import (
	"math/rand"
	"time"

	"github.com/mcprice30/wmn/data"
)

// HeartRateSensorInterval indicates how often data is generated by the heart
// rate sensor, before being sent to the sensor hub.
const HeartRateSensorInterval = "1000ms"

// HeartRateSensor represents the heart rate sensor attached to the first
// responder. It implements sensor.SensorStream, allowing it to be sent to the
// sensor hub.
type HeartRateSensor struct {
	// interval indicates how often data is generated.
	interval time.Duration
	// id is the id of the upcoming data segment, used in sequencing data.
	id byte
}

// CreateHeartRateSensor will create a new instance of HeartRateSensor.
func CreateHeartRateSensor() *HeartRateSensor {
	return &HeartRateSensor{
		interval: intervalFromString(HeartRateSensorInterval),
	}
}

// Interval indicates how regularly data is generated by the sensor.
// It implements SensorStream
func (s *HeartRateSensor) Interval() time.Duration {
	return s.interval
}

// GetData will generate a new data point from the sensor.
// It implements SensorStream
func (s *HeartRateSensor) GetData() data.SensorData {
	hr := rand.Float64()*80.0 + 100.0
	defer s.incrementId()
	return data.CreateHeartRateData(s.id, hr)
}

// incrementId will increase the packet id, used in sequencing data.
func (s *HeartRateSensor) incrementId() {
	s.id++
}
