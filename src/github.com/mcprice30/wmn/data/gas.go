package data

import (
	"encoding/json"
	"fmt"
)

// GasDataType indicates what the first byte of GasData will be when marshalled
// into bytes for transmission.
const GasDataType byte = 3

// GasDataSize indicates the size of a GasData object when marshalled to bytes.
const GasDataSize = 10

// GasData represents a data point from the toxic gas sensor on the first
// responder. It implements SensorData.
type GasData struct {

	// id indicates where this data point falls relative to all other data points
	// from the sensor.
	id byte

	// percentage indicates what percentage of the air around the first responder
	// is toxic.
	percentage float64
}

// CreateGasData will instantiate a new GasData object with the given id,
// representing a measurement from the first responder's toxic gas sensor
// that indicates the given percentage of air nearby is toxic.
func CreateGasData(id byte, percentage float64) *GasData {
	return &GasData{
		id:         id,
		percentage: percentage,
	}
}

// Id indicates the sequence id of this element of data among all data points
// generated by this sensor, as defined by SensorData.
func (d *GasData) Id() byte {
	return d.id
}

// Type returns a value that uniquely identifies toxic gas sensors, as defined
// by SensorData.
func (d *GasData) Type() byte {
	return GasDataType
}

// String will return a string description of the toxic gas measurement, as
// defined by fmt.Stringer.
func (d *GasData) String() string {
	return fmt.Sprintf("Gas [%d]: %f", d.id, d.percentage)
}

// MarhsalJSON implements json.Marshaler, allowing for this data type to be
// converted to JSON easily.
func (d *GasData) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.percentage)
}

// NumBytes returns the number of bytes that a GasData object is marshalled to,
// as defined by SensorData.
func (u *GasData) NumBytes() int {
	return GasDataSize
}

// ToBytes will marshall this data point into a slice of bytes, which can be
// transmitted across the network, as defined by SensorData.
func (d *GasData) ToBytes() []byte {
	out := make([]byte, GasDataSize)
	idx := 0
	out[idx] = d.Type()
	idx++
	out[idx] = d.Id()
	idx++
	for _, b := range float64ToBytes(d.percentage) {
		out[idx] = b
		idx++
	}
	return out
}

// GasDataFromBytes takes the given input bytes and returns a new GasData
// object made from the data stored in the bytes.
func GasDataFromBytes(in []byte) SensorData {
	return &GasData{
		id:         in[1],
		percentage: bytesToFloat64(in[2:GasDataSize]),
	}
}
