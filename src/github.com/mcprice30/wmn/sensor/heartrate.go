package sensor

import (
	"math/rand"
	"time"

	"github.com/mcprice30/wmn/data"
)

// HeartRateSensorInterval indicates how often data is generated by the heart
// rate sensor, before being sent to the sensor hub.
const HeartRateSensorInterval = "1000ms"

// HeartRateSensor represents the heart rate sensor attached to the first
// responder. It implements sensor.SensorStream, allowing it to be sent to the
// sensor hub.
type HeartRateSensor struct {
	// interval indicates how often data is generated.
	interval time.Duration
	// id is the id of the upcoming data segment, used in sequencing data.
	id byte

	lastHr float64
}

// CreateHeartRateSensor will create a new instance of HeartRateSensor.
func CreateHeartRateSensor() *HeartRateSensor {
	return &HeartRateSensor{
		interval: intervalFromString(HeartRateSensorInterval),
		lastHr:   130.0,
	}
}

// Interval indicates how regularly data is generated by the sensor.
// It implements SensorStream
func (s *HeartRateSensor) Interval() time.Duration {
	return s.interval
}

// GetData will generate a new data point from the sensor.
// It implements SensorStream
func (s *HeartRateSensor) GetData() data.SensorData {
	hr := s.lastHr + rand.Float64()*5.0 - 2.5
	if hr < 80 {
		hr = 80
	}
	if hr > 180 {
		hr = 180
	}
	s.lastHr = hr
	defer s.incrementId()
	return data.CreateHeartRateData(s.id, hr)
}

// incrementId will increase the packet id, used in sequencing data.
func (s *HeartRateSensor) incrementId() {
	s.id++
}
