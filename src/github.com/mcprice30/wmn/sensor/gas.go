package sensor

import (
	"math/rand"
	"time"

	"github.com/mcprice30/wmn/data"
)

// GasSensorInterval indicates how often data is generated by the toxic gas
// sensor, before being sent to the sensor hub.
const GasSensorInterval = "250ms"

// GasSensor represents the toxic gas sensor attached to the first responder.
// It implements sensor.SensorStream, allowing for the data it generates to be
// sent to the sensor hub.
type GasSensor struct {
	// interval indicates how often data is generated.
	interval time.Duration
	// id is the id of the upcoming data segment, used in sequencing data.
	id byte

	lastGas float64
}

// CreateGasSensor will create a new instance of GasSensor.
func CreateGasSensor() *GasSensor {
	return &GasSensor{
		interval: intervalFromString(GasSensorInterval),
	}
}

// Interval indicates how regularly data is generated by the sensor.
// It implements SensorStream.
func (s *GasSensor) Interval() time.Duration {
	return s.interval
}

// GetData will generate a new data point from the sensor.
// It implements SensorStream.
func (s *GasSensor) GetData() data.SensorData {
	pct := s.lastGas + rand.Float64()*5.0 - 2.50
	if pct < 0 {
		pct = 0
	}
	s.lastGas = pct
	defer s.incrementId()
	return data.CreateGasData(s.id, pct)
}

// incrementId will increase the packet id, used in sequencing data.
func (s *GasSensor) incrementId() {
	s.id++
}
